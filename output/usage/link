Original page: https://solito.dev/usage/link

On this page

# Link

    
    
    ts
    
    import { Link } from 'solito/link'
    
    Copy
    
    
    ts
    
    import { Link } from 'solito/link'
    
    Copy

A drop-in replacement for [Next.js' `<Link />`
component](https://nextjs.org/docs/api-reference/next/link). It follows the
exact same API.

    
    
    tsx
    
    <Link href="/" />
    
    Copy
    
    
    tsx
    
    <Link href="/" />
    
    Copy

## Propsâ€‹

### `viewProps`â€‹

Props used by the underlying `View`.

    
    
    tsx
    
    <Link viewProps={{ style: { height: 100 } }} href="/">
    
      <View />
    
    </Link>
    
    Copy
    
    
    tsx
    
    <Link viewProps={{ style: { height: 100 } }} href="/">
    
      <View />
    
    </Link>
    
    Copy

### Next.js propsâ€‹

It also supports the props from [Next.js' `<Link />`
component](https://nextjs.org/docs/api-reference/next/link), besides
`passHref`.

## Configurationâ€‹

Before a `Link` can work on iOS and Android, you'll need to properly configure
your `linking` config with React Navigation.

See their docs:

  * [Configuring links](https://reactnavigation.org/docs/configuring-links/) for in-app routing
  * [Deep linking](https://reactnavigation.org/docs/deep-linking/) for handling inbound links into your app

## Wrapper componentsâ€‹

You can easily create wrapper components for your links:

    
    
    tsx
    
    export const ArtistLink = ({ slug }) => (
    
      <Link href={`/artists/${slug}`} as={`/@${slug}`} shallow>
    
        <View />
    
      </Link>
    
    )
    
    Copy
    
    
    tsx
    
    export const ArtistLink = ({ slug }) => (
    
      <Link href={`/artists/${slug}`} as={`/@${slug}`} shallow>
    
        <View />
    
      </Link>
    
    )
    
    Copy

## Children recommendationâ€‹

You shouldn't render a `Pressable` or `Touchable` as a child of a `Link`
component. Doing so can mess with the press events on Web and cause issues
with `next/router`.

    
    
    tsx
    
    // ðŸš¨ this is bad, it uses Pressable
    
    <Link href="/">
    
      <Pressable />
    
    </Link>
    
    Copy
    
    
    tsx
    
    // ðŸš¨ this is bad, it uses Pressable
    
    <Link href="/">
    
      <Pressable />
    
    </Link>
    
    Copy
    
    
    tsx
    
    // âœ… this is good, it uses a View
    
    <Link href="/">
    
      <View />
    
    </Link>
    
    Copy
    
    
    tsx
    
    // âœ… this is good, it uses a View
    
    <Link href="/">
    
      <View />
    
    </Link>
    
    Copy

### Workaroundsâ€‹

#### Disable the pressableâ€‹

Sometimes, this can be tough to get around. What if you want to wrap a
`Button` with a Link?

Technically, if the child touchable is `disabled`, then it won't capture touch
events, so that is fine.

    
    
    tsx
    
    // âœ… this is okay, since it's disabled
    
    <Link href="/">
    
      <Pressable disabled />
    
    </Link>
    
    Copy
    
    
    tsx
    
    // âœ… this is okay, since it's disabled
    
    <Link href="/">
    
      <Pressable disabled />
    
    </Link>
    
    Copy

However, this might throw off your styling or interaction events. Chances are,
you don't want to disable the button altogether. So what else can we do?

#### Use Dripsy's `as` propâ€‹

If you're using Dripsy, you can utilize the `as` prop and forward it down to
your pressable:

    
    
    tsx
    
    import { Pressable, View } from 'dripsy'
    
    import { Link } from 'solito/link'
    
    Â 
    
    // your button component
    
    const Button = ({ as, children }: React.ComponentProps<typeof Pressable>) => (
    
      <Pressable as={as}>{children}</Pressable>
    
    )
    
    Â 
    
    export const ButtonLink = () => (
    
      <Link href="/">
    
        <Button as={View} />
    
      </Link>
    
    )
    
    Copy
    
    
    tsx
    
    import { Pressable, View } from 'dripsy'
    
    import { Link } from 'solito/link'
    
    Â 
    
    // your button component
    
    const Button = ({ as, children }: React.ComponentProps<typeof Pressable>) => (
    
      <Pressable as={as}>{children}</Pressable>
    
    )
    
    Â 
    
    export const ButtonLink = () => (
    
      <Link href="/">
    
        <Button as={View} />
    
      </Link>
    
    )
    
    Copy

#### Create a custom `Link` componentâ€‹

If you're using something like `MotiPressable`, where none of the above
solutions are viable, you can create a custom `Link` component.

In order to preserve accessibility on Web for links, we'll need to utilize a
few tricks.

See the [custom link](/usage/use-link) guide.

## Text Linkâ€‹

If you need to render a text node in your link, reference the [`<TextLink
/>`](/usage/text-link) docs.

[Edit this
page](https://github.com/nandorojo/solito/tree/master/docs/docs/usage/link.mdx)

Last updated on **3/11/2024** by **Fernando Rojo**

[ PreviousExpo Router](/expo-router)

[Next<TextLink />](/usage/text-link)

  * Props
    * `viewProps`
    * Next.js props
  * Configuration
  * Wrapper components
  * Children recommendation
    * Workarounds
  * Text Link

